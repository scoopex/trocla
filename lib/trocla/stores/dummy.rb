# a simple in memory store just as an example

require 'securerandom'

class Trocla::Stores::Dummy < Trocla::Store
  def get(key,format)
    if ( key !~ /^unset_/ )
		fake_format(key, format)
    else
      nil
    end
  end


  def set(key,format,value,options={})
  end

  def delete(key,format=nil)
  end

  def set_plain(key,value,options)
  end

  def set_format(key,format,value,options)
  end

  def delete_all(key)
  end

  def delete_format(key,format)
  end

  private
  def fake_format(key, format)

    if format == "x509"
		 fake_x509(key)
    else
       format + "_" + SecureRandom.uuid 
    end
  end

  private 
  def fake_x509(key)

    # TODO: create random keypairs here
    output = %{
-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIIFXTCCA0WgAwIBAgIJAMwu6KSZt+jhMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
aWRnaXRzIFB0eSBMdGQwHhcNMTcxMDEwMDkxMDA3WhcNMTgxMDEwMDkxMDA3WjBF
MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50
ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
CgKCAgEAvAmWHCJY/ZOj4+uIvQu14V6I0y7Xy7impspzGzAPQ0soTflRIm0OxUNt
3qyGplDOqjE7m9CBq/A+VN5evy2ommJirHRTUCTsOIexFtqudCZZtVh2zfPKSZN+
pen5Cq8cEmX7mU8V0hwiXq1ogbsDhNC8q7R4TmntI+oC9xswrE+zUmx4ymGiHsLh
V6wLWsz+671VsRBfl3L1XGNbxBLr3vtsVhylEv6ztxpEyCoE/j9kuuosC4DxnGsi
WYbzeemnfjQb37FWHPcyVMns8LLY66oK+jXXVcjwdN2ohNHi03Wu5FxFSX1i+dry
fAMdJENoXaLwnGPpQjng7kV3K1NIt+Tlp63UTYTn1XZrTNZKP0wCsR0b+xPDKSZJ
oYmd8pkRvwkwfYRSGv8VAZ0OVAs5+cGHGpKEfxsZUF4iRpFcdUdi4pqzEnyZIzAC
DEjxjqHXhYbzpfuhFCCItDnEHU/+RbnRe8ba5AQxlMGpt8WKvbvt0Yvyr/a5Q6pc
to/d/ZeOVgPv6GeeGKCVtK6webJLKqkNi0nQ7VpLxHKJU2waO/7rhMZsflKOdnZX
UjPVGYmsQpL4ASQalE2HVGXGUfjAauAxY/Iu6WkYT85ppYLvuMYwRaTPGk9lqskZ
ebmQzcgLA1hM2AnBhD9u2QKdeR4O1/jsKK2fzkuxKWCfCpB0BZECAwEAAaNQME4w
HQYDVR0OBBYEFKznZ6+6FEyHPZ2f4AYrKpkpfJ0sMB8GA1UdIwQYMBaAFKznZ6+6
FEyHPZ2f4AYrKpkpfJ0sMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggIB
AD9TiKu7TxLBKXODHidu7RusRZIl7JA/D4Qz48WTFtfkB9QrrHBMUAsmayJcf+cN
8XJNH4hBeP/L8+7cbUnSDIz8FqAnCChH67UYfL1KTRJgw6/Odha25P3KdE28udqk
zvtF5NOeeQ/bqt7TxLgoGdkPrUQq2+MKNwcNF35P2oZla6KySoLn1dvGu9u25snc
7aTxi4dUMgDu+jt+U3o04ruz4eQzZIMVN+Z9/IxAdXHL1e8XSG+mqo9ugES3EXGu
dVn6pzadSr8Yc1oQBtbtUzltZy/tA5LxetZmEa3W+C4x+MwNAai4GGZJ9wcCG2FJ
xS8beu3CFM25W43UBEUOfesXcVt1E8UhiQkotDr6btRIqKcdwQ4OePAHb4OsQffI
5IoSJeQQbISt+2d5qha+05XAPmiHdrpoUT5gi8osCs3qOxmxZCLoilCc3vo9sYYS
0pwWP81T8oIKBkpXlfytes23OdnUQjTz6O4/1IX7DA9VRNZWsAgJ1tSthq61lsjx
6gK8KUDd2M/LekgWs7k6AHwI80MY4RmwRqLLsUn6ZrFGOfKNGNVDk0I1WFjYENi5
0uxTCsAJMF5IbtdodZG0ZpjZiOorRbzAiyaaCrtrZ7pe6XoDsOiX6ocRnc9v+Ihp
FIra6PHy2I1Keh94rI1SMFbxh3P/0OWnj1CnqwUmn2GX
-----END CERTIFICATE-----    
}
    output
  end
  
end
